# Ultralytics YOLO 🚀, AGPL-3.0 license
# YOLOv8-seg instance segmentation model. For Usage examples see https://docs.ultralytics.com/tasks/segment

# Parameters
nc: 2  # number of classes
scales: # model compound scaling constants, i.e. 'model=yolov8n-seg.yaml' will call yolov8-seg.yaml with scale 'n'
  # [depth, width, max_channels]

  # n: [0.33, 0.25, 1024]
  # s: [0.33, 0.50, 1024]
  m: [0.67, 0.75, 768]
  # l: [1.00, 1.00, 512]
  # x: [1.00, 1.25, 512]

# YOLOv8.0n backbone
backbone:
  # [from, repeats, module, args]
  - [-1, 1, Conv, [64, 3, 2]]  # 0-P1/2         第0层，使用64个3x3的卷积核，步长为2进行卷积，得到P1/2特征图
  - [-1, 1, Conv, [128, 3, 2]]  # 1-P2/4        第1层，使用128个3x3的卷积核，步长为2进行卷积，得到P2/4特征图
  - [-1, 3, C2f, [128, True]]                  #第2层，进行3次池化操作，每次操作使用128个通道，最后一次操作使用降维（True）
  - [-1, 1, Conv, [256, 3, 2]]  # 3-P3/8        第3层，使用256个3x3的卷积核，步长为2进行卷积，得到P3/8特征图
  - [-1, 6, C2f, [256, True]]                  #第4层，进行6次池化操作，每次操作使用256个通道，最后一次操作使用降维（True）
  - [-1, 1, Conv, [512, 3, 2]]  # 5-P4/16       第5层，使用512个3x3的卷积核，步长为2进行卷积，得到P4/16特征图
  - [-1, 6, C2f, [512, True]]                  #第6层，进行6次池化操作，每次操作使用512个通道，最后一次操作使用降维（True）
  - [-1, 1, Conv, [1024, 3, 2]]  # 7-P5/32      第7层，使用1024个3x3的卷积核，步长为2进行卷积，得到P5/32特征图
  - [-1, 3, C2f, [1024, True]]                 #第8层，进行3次池化操作，每次操作使用1024个通道，最后一次操作使用降维（True）
  - [-1, 1, SPPF, [1024, 5]]  # 9               第9层，使用1024个通道的SPPF（空间金字塔池化）层，使用5个不同大小的池化核进行池化操作

ch: 1

# YOLOv8.0n head
head:
  - [-1, 1, nn.Upsample, [None, 2, 'nearest']]
  - [[-1, 6], 1, Concat, [1]]  # cat backbone P4
  - [-1, 3, C2f, [512]]  # 12

  - [-1, 1, nn.Upsample, [None, 2, 'nearest']]
  - [[-1, 4], 1, Concat, [1]]  # cat backbone P3
  - [-1, 3, C2f, [256]]  # 15 (P3/8-small)

  - [-1, 1, Conv, [256, 3, 2]]
  - [[-1, 12], 1, Concat, [1]]  # cat head P4
  - [-1, 3, C2f, [512]]  # 18 (P4/16-medium)

  - [-1, 1, Conv, [512, 3, 2]]
  - [[-1, 9], 1, Concat, [1]]  # cat head P5
  - [-1, 3, C2f, [1024]]  # 21 (P5/32-large)

  - [[15, 18, 21], 1, Segment, [nc, 32, 256]]  # Segment(P3, P4, P5)
